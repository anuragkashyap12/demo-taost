/*! For license information please see bundle.headless.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(self,(()=>(()=>{"use strict";var e={408:(e,t)=>{var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),l=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator;var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,_={};function S(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||y}function T(){}function h(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||y}S.prototype.isReactComponent={},S.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},S.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=S.prototype;var m=h.prototype=new T;m.constructor=h,v(m,S.prototype),m.isPureReactComponent=!0;var A=Array.isArray,b=Object.prototype.hasOwnProperty,E={current:null},O={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var o,u={},i=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)b.call(t,o)&&!O.hasOwnProperty(o)&&(u[o]=t[o]);var s=arguments.length-2;if(1===s)u.children=n;else if(1<s){for(var c=Array(s),f=0;f<s;f++)c[f]=arguments[f+2];u.children=c}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===u[o]&&(u[o]=s[o]);return{$$typeof:r,type:e,key:i,ref:a,props:u,_owner:E.current}}function g(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var D=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,o,u,i){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var s=!1;if(null===e)s=!0;else switch(a){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case r:case n:s=!0}}if(s)return i=i(s=e),e=""===u?"."+R(s,0):u,A(i)?(o="",null!=e&&(o=e.replace(D,"$&/")+"/"),I(i,t,o,"",(function(e){return e}))):null!=i&&(g(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(D,"$&/")+"/")+e)),t.push(i)),1;if(s=0,u=""===u?".":u+":",A(e))for(var c=0;c<e.length;c++){var f=u+R(a=e[c],c);s+=I(a,t,o,f,i)}else if(f=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof f)for(e=f.call(e),c=0;!(a=e.next()).done;)s+=I(a=a.value,t,o,f=u+R(a,c++),i);else if("object"===a)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function j(e,t,r){if(null==e)return e;var n=[],o=0;return I(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function w(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var k={current:null},M={transition:null},x={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:M,ReactCurrentOwner:E};t.Children={map:j,forEach:function(e,t,r){j(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return j(e,(function(){t++})),t},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!g(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=S,t.Fragment=o,t.Profiler=i,t.PureComponent=h,t.StrictMode=u,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=x,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=v({},e.props),u=e.key,i=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,a=E.current),void 0!==t.key&&(u=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)b.call(t,c)&&!O.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:r,type:e.type,key:u,ref:i,props:o,_owner:a}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=g,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:w}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return k.current.useCallback(e,t)},t.useContext=function(e){return k.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return k.current.useDeferredValue(e)},t.useEffect=function(e,t){return k.current.useEffect(e,t)},t.useId=function(){return k.current.useId()},t.useImperativeHandle=function(e,t,r){return k.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return k.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.current.useMemo(e,t)},t.useReducer=function(e,t,r){return k.current.useReducer(e,t,r)},t.useRef=function(e){return k.current.useRef(e)},t.useState=function(e){return k.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return k.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return k.current.useTransition()},t.version="18.2.0"},294:(e,t,r)=>{e.exports=r(408)},589:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,u=t.length;o<u;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.useStore=t.defaultTimeouts=t.dispatch=t.reducer=t.TOAST_EXPIRE_DISMISS_DELAY=t.ActionType=void 0;var u,i=r(294);!function(e){e[e.ADD_TOAST=0]="ADD_TOAST",e[e.UPDATE_TOAST=1]="UPDATE_TOAST",e[e.UPSERT_TOAST=2]="UPSERT_TOAST",e[e.DISMISS_TOAST=3]="DISMISS_TOAST",e[e.REMOVE_TOAST=4]="REMOVE_TOAST",e[e.START_PAUSE=5]="START_PAUSE",e[e.END_PAUSE=6]="END_PAUSE"}(u=t.ActionType||(t.ActionType={}));var a=new Map;t.TOAST_EXPIRE_DISMISS_DELAY=1e3;var s=function(e){if(!a.has(e)){var r=setTimeout((function(){a.delete(e),(0,t.dispatch)({type:u.REMOVE_TOAST,toastId:e})}),t.TOAST_EXPIRE_DISMISS_DELAY);a.set(e,r)}};t.reducer=function(e,r){switch(r.type){case u.ADD_TOAST:return n(n({},e),{toasts:o([r.toast],e.toasts,!0).slice(0,20)});case u.UPDATE_TOAST:return r.toast.id&&(l=r.toast.id,(d=a.get(l))&&clearTimeout(d)),n(n({},e),{toasts:e.toasts.map((function(e){return e.id===r.toast.id?n(n({},e),r.toast):e}))});case u.UPSERT_TOAST:var i=r.toast;return e.toasts.find((function(e){return e.id===i.id}))?(0,t.reducer)(e,{type:u.UPDATE_TOAST,toast:i}):(0,t.reducer)(e,{type:u.ADD_TOAST,toast:i});case u.DISMISS_TOAST:var c=r.toastId;return c?s(c):e.toasts.forEach((function(e){s(e.id)})),n(n({},e),{toasts:e.toasts.map((function(e){return e.id===c||void 0===c?n(n({},e),{visible:!1}):e}))});case u.REMOVE_TOAST:return void 0===r.toastId?n(n({},e),{toasts:[]}):n(n({},e),{toasts:e.toasts.filter((function(e){return e.id!==r.toastId}))});case u.START_PAUSE:return n(n({},e),{pausedAt:r.time});case u.END_PAUSE:var f=r.time-(e.pausedAt||0);return n(n({},e),{pausedAt:void 0,toasts:e.toasts.map((function(e){return n(n({},e),{pauseDuration:e.pauseDuration+f})}))})}var l,d};var c=[],f={toasts:[],pausedAt:void 0};t.dispatch=function(e){f=(0,t.reducer)(f,e),c.forEach((function(e){e(f)}))},t.defaultTimeouts={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3};t.useStore=function(e){void 0===e&&(e={});var r=(0,i.useState)(f),o=r[0],u=r[1];(0,i.useEffect)((function(){return c.push(u),function(){var e=c.indexOf(u);e>-1&&c.splice(e,1)}}),[o]);var a=o.toasts.map((function(r){var o,u;return n(n(n(n({},e),e[r.type]),r),{duration:r.duration||(null===(o=e[r.type])||void 0===o?void 0:o.duration)||(null==e?void 0:e.duration)||t.defaultTimeouts[r.type],style:n(n(n({},e.style),null===(u=e[r.type])||void 0===u?void 0:u.style),r.style)})}));return n(n({},o),{toasts:a})}},946:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.toast=void 0;var o=r(384),u=r(488),i=r(589),a=function(e){return function(t,r){var o=function(e,t,r){return void 0===t&&(t="blank"),n(n({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0},r),{id:(null==r?void 0:r.id)||(0,u.genId)()})}(t,e,r);return(0,i.dispatch)({type:i.ActionType.UPSERT_TOAST,toast:o}),o.id}},s=function(e,t){return a("blank")(e,t)};t.toast=s,s.error=a("error"),s.success=a("success"),s.loading=a("loading"),s.custom=a("custom"),s.dismiss=function(e){(0,i.dispatch)({type:i.ActionType.DISMISS_TOAST,toastId:e})},s.remove=function(e){return(0,i.dispatch)({type:i.ActionType.REMOVE_TOAST,toastId:e})},s.promise=function(e,t,r){var u=s.loading(t.loading,n(n({},r),null==r?void 0:r.loading));return e.then((function(e){return s.success((0,o.resolveValue)(t.success,e),n(n({id:u},r),null==r?void 0:r.success)),e})).catch((function(e){s.error((0,o.resolveValue)(t.error,e),n(n({id:u},r),null==r?void 0:r.error))})),e}},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resolveValue=void 0;t.resolveValue=function(e,t){return function(e){return"function"==typeof e}(e)?e(t):e}},871:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useToaster=void 0;var n=r(294),o=r(589),u=r(946),i=function(e,t){(0,o.dispatch)({type:o.ActionType.UPDATE_TOAST,toast:{id:e,height:t}})},a=function(){(0,o.dispatch)({type:o.ActionType.START_PAUSE,time:Date.now()})};t.useToaster=function(e){var t=(0,o.useStore)(e),r=t.toasts,s=t.pausedAt;(0,n.useEffect)((function(){if(!s){var e=Date.now(),t=r.map((function(t){if(t.duration!==1/0){var r=(t.duration||0)+t.pauseDuration-(e-t.createdAt);if(!(r<0))return setTimeout((function(){return u.toast.dismiss(t.id)}),r);t.visible&&u.toast.dismiss(t.id)}}));return function(){t.forEach((function(e){return e&&clearTimeout(e)}))}}}),[r,s]);var c=(0,n.useCallback)((function(){s&&(0,o.dispatch)({type:o.ActionType.END_PAUSE,time:Date.now()})}),[s]),f=(0,n.useCallback)((function(e,t){var n,o=t||{},u=o.reverseOrder,i=void 0!==u&&u,a=o.gutter,s=void 0===a?8:a,c=o.defaultPosition,f=r.filter((function(t){return(t.position||c)===(e.position||c)&&t.height})),l=f.findIndex((function(t){return t.id===e.id})),d=f.filter((function(e,t){return t<l&&e.visible})).length;return(n=f.filter((function(e){return e.visible}))).slice.apply(n,i?[d+1]:[0,d]).reduce((function(e,t){return e+(t.height||0)+s}),0)}),[r]);return{toasts:r,handlers:{updateHeight:i,startPause:a,endPause:c,calculateOffset:f}}}},488:(e,t)=>{var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.prefersReducedMotion=t.genId=void 0,t.genId=(r=0,function(){return(++r).toString()}),t.prefersReducedMotion=(n=void 0,function(){if(void 0===n&&"undefined"!=typeof window){var e=matchMedia("(prefers-reduced-motion: reduce)");n=!e||e.matches}return n})}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var u=t[n]={exports:{}};return e[n].call(u.exports,u,u.exports,r),u.exports}var n={};return(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.toast=e.useToasterStore=e.useToaster=e.resolveValue=void 0;var t=r(946);Object.defineProperty(e,"toast",{enumerable:!0,get:function(){return t.toast}});var o=r(384);Object.defineProperty(e,"resolveValue",{enumerable:!0,get:function(){return o.resolveValue}});var u=r(871);Object.defineProperty(e,"useToaster",{enumerable:!0,get:function(){return u.useToaster}});var i=r(589);Object.defineProperty(e,"useToasterStore",{enumerable:!0,get:function(){return i.useStore}}),e.default=t.toast})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
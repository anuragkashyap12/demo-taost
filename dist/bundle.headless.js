/*! For license information please see bundle.headless.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["cg-toast"]=t():e["cg-toast"]=t()}(self,(()=>(()=>{"use strict";var e={408:(e,t)=>{var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),a=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),l=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator;var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,_={};function S(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||y}function T(){}function h(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||y}S.prototype.isReactComponent={},S.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},S.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=S.prototype;var m=h.prototype=new T;m.constructor=h,v(m,S.prototype),m.isPureReactComponent=!0;var A=Array.isArray,b=Object.prototype.hasOwnProperty,E={current:null},O={key:!0,ref:!0,__self:!0,__source:!0};function g(e,t,n){var o,u={},i=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)b.call(t,o)&&!O.hasOwnProperty(o)&&(u[o]=t[o]);var s=arguments.length-2;if(1===s)u.children=n;else if(1<s){for(var c=Array(s),f=0;f<s;f++)c[f]=arguments[f+2];u.children=c}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===u[o]&&(u[o]=s[o]);return{$$typeof:r,type:e,key:i,ref:a,props:u,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var D=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,o,u,i){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var s=!1;if(null===e)s=!0;else switch(a){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case r:case n:s=!0}}if(s)return i=i(s=e),e=""===u?"."+R(s,0):u,A(i)?(o="",null!=e&&(o=e.replace(D,"$&/")+"/"),I(i,t,o,"",(function(e){return e}))):null!=i&&(P(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(D,"$&/")+"/")+e)),t.push(i)),1;if(s=0,u=""===u?".":u+":",A(e))for(var c=0;c<e.length;c++){var f=u+R(a=e[c],c);s+=I(a,t,o,f,i)}else if(f=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof f)for(e=f.call(e),c=0;!(a=e.next()).done;)s+=I(a=a.value,t,o,f=u+R(a,c++),i);else if("object"===a)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function j(e,t,r){if(null==e)return e;var n=[],o=0;return I(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function w(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var k={current:null},M={transition:null},x={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:M,ReactCurrentOwner:E};t.Children={map:j,forEach:function(e,t,r){j(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return j(e,(function(){t++})),t},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=S,t.Fragment=o,t.Profiler=i,t.PureComponent=h,t.StrictMode=u,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=x,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=v({},e.props),u=e.key,i=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,a=E.current),void 0!==t.key&&(u=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)b.call(t,c)&&!O.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:r,type:e.type,key:u,ref:i,props:o,_owner:a}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=g,t.createFactory=function(e){var t=g.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:w}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return k.current.useCallback(e,t)},t.useContext=function(e){return k.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return k.current.useDeferredValue(e)},t.useEffect=function(e,t){return k.current.useEffect(e,t)},t.useId=function(){return k.current.useId()},t.useImperativeHandle=function(e,t,r){return k.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return k.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.current.useMemo(e,t)},t.useReducer=function(e,t,r){return k.current.useReducer(e,t,r)},t.useRef=function(e){return k.current.useRef(e)},t.useState=function(e){return k.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return k.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return k.current.useTransition()},t.version="18.2.0"},294:(e,t,r)=>{e.exports=r(408)},589:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,u=t.length;o<u;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.useStore=t.defaultTimeouts=t.dispatch=t.reducer=t.TOAST_EXPIRE_DISMISS_DELAY=t.ActionType=void 0;var u,i=r(294);!function(e){e[e.ADD_TOAST=0]="ADD_TOAST",e[e.UPDATE_TOAST=1]="UPDATE_TOAST",e[e.UPSERT_TOAST=2]="UPSERT_TOAST",e[e.DISMISS_TOAST=3]="DISMISS_TOAST",e[e.REMOVE_TOAST=4]="REMOVE_TOAST",e[e.START_PAUSE=5]="START_PAUSE",e[e.END_PAUSE=6]="END_PAUSE"}(u=t.ActionType||(t.ActionType={}));var a=new Map;t.TOAST_EXPIRE_DISMISS_DELAY=1e3;var s=function(e){if(!a.has(e)){var r=setTimeout((function(){a.delete(e),(0,t.dispatch)({type:u.REMOVE_TOAST,toastId:e})}),t.TOAST_EXPIRE_DISMISS_DELAY);a.set(e,r)}};t.reducer=function(e,r){switch(r.type){case u.ADD_TOAST:return n(n({},e),{toasts:o([r.toast],e.toasts,!0).slice(0,20)});case u.UPDATE_TOAST:return r.toast.id&&(l=r.toast.id,(d=a.get(l))&&clearTimeout(d)),n(n({},e),{toasts:e.toasts.map((function(e){return e.id===r.toast.id?n(n({},e),r.toast):e}))});case u.UPSERT_TOAST:var i=r.toast;return e.toasts.find((function(e){return e.id===i.id}))?(0,t.reducer)(e,{type:u.UPDATE_TOAST,toast:i}):(0,t.reducer)(e,{type:u.ADD_TOAST,toast:i});case u.DISMISS_TOAST:var c=r.toastId;return c?s(c):e.toasts.forEach((function(e){s(e.id)})),n(n({},e),{toasts:e.toasts.map((function(e){return e.id===c||void 0===c?n(n({},e),{visible:!1}):e}))});case u.REMOVE_TOAST:return void 0===r.toastId?n(n({},e),{toasts:[]}):n(n({},e),{toasts:e.toasts.filter((function(e){return e.id!==r.toastId}))});case u.START_PAUSE:return n(n({},e),{pausedAt:r.time});case u.END_PAUSE:var f=r.time-(e.pausedAt||0);return n(n({},e),{pausedAt:void 0,toasts:e.toasts.map((function(e){return n(n({},e),{pauseDuration:e.pauseDuration+f})}))})}var l,d};var c=[],f={toasts:[],pausedAt:void 0};t.dispatch=function(e){f=(0,t.reducer)(f,e),c.forEach((function(e){e(f)}))},t.defaultTimeouts={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3};t.useStore=function(e){void 0===e&&(e={});var r=(0,i.useState)(f),o=r[0],u=r[1];(0,i.useEffect)((function(){return c.push(u),function(){var e=c.indexOf(u);e>-1&&c.splice(e,1)}}),[o]);var a=o.toasts.map((function(r){var o,u;return n(n(n(n({},e),e[r.type]),r),{duration:r.duration||(null===(o=e[r.type])||void 0===o?void 0:o.duration)||(null==e?void 0:e.duration)||t.defaultTimeouts[r.type],style:n(n(n({},e.style),null===(u=e[r.type])||void 0===u?void 0:u.style),r.style)})}));return n(n({},o),{toasts:a})}},946:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.toast=void 0;var o=r(384),u=r(488),i=r(589),a=function(e){return function(t,r){var o=function(e,t,r){return void 0===t&&(t="blank"),n(n({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0},r),{id:(null==r?void 0:r.id)||(0,u.genId)()})}(t,e,r);return(0,i.dispatch)({type:i.ActionType.UPSERT_TOAST,toast:o}),o.id}},s=function(e,t){return a("blank")(e,t)};t.toast=s,s.error=a("error"),s.success=a("success"),s.loading=a("loading"),s.custom=a("custom"),s.dismiss=function(e){(0,i.dispatch)({type:i.ActionType.DISMISS_TOAST,toastId:e})},s.remove=function(e){return(0,i.dispatch)({type:i.ActionType.REMOVE_TOAST,toastId:e})},s.promise=function(e,t,r){var u=s.loading(t.loading,n(n({},r),null==r?void 0:r.loading));return e.then((function(e){return s.success((0,o.resolveValue)(t.success,e),n(n({id:u},r),null==r?void 0:r.success)),e})).catch((function(e){s.error((0,o.resolveValue)(t.error,e),n(n({id:u},r),null==r?void 0:r.error))})),e}},384:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resolveValue=void 0;t.resolveValue=function(e,t){return function(e){return"function"==typeof e}(e)?e(t):e}},871:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useToaster=void 0;var n=r(294),o=r(589),u=r(946),i=function(e,t){(0,o.dispatch)({type:o.ActionType.UPDATE_TOAST,toast:{id:e,height:t}})},a=function(){(0,o.dispatch)({type:o.ActionType.START_PAUSE,time:Date.now()})};t.useToaster=function(e){var t=(0,o.useStore)(e),r=t.toasts,s=t.pausedAt;(0,n.useEffect)((function(){if(!s){var e=Date.now(),t=r.map((function(t){if(t.duration!==1/0){var r=(t.duration||0)+t.pauseDuration-(e-t.createdAt);if(!(r<0))return setTimeout((function(){return u.toast.dismiss(t.id)}),r);t.visible&&u.toast.dismiss(t.id)}}));return function(){t.forEach((function(e){return e&&clearTimeout(e)}))}}}),[r,s]);var c=(0,n.useCallback)((function(){s&&(0,o.dispatch)({type:o.ActionType.END_PAUSE,time:Date.now()})}),[s]),f=(0,n.useCallback)((function(e,t){var n,o=t||{},u=o.reverseOrder,i=void 0!==u&&u,a=o.gutter,s=void 0===a?8:a,c=o.defaultPosition,f=r.filter((function(t){return(t.position||c)===(e.position||c)&&t.height})),l=f.findIndex((function(t){return t.id===e.id})),d=f.filter((function(e,t){return t<l&&e.visible})).length;return(n=f.filter((function(e){return e.visible}))).slice.apply(n,i?[d+1]:[0,d]).reduce((function(e,t){return e+(t.height||0)+s}),0)}),[r]);return{toasts:r,handlers:{updateHeight:i,startPause:a,endPause:c,calculateOffset:f}}}},488:(e,t)=>{var r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.prefersReducedMotion=t.genId=void 0,t.genId=(r=0,function(){return(++r).toString()}),t.prefersReducedMotion=(n=void 0,function(){if(void 0===n&&"undefined"!=typeof window){var e=matchMedia("(prefers-reduced-motion: reduce)");n=!e||e.matches}return n})}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var u=t[n]={exports:{}};return e[n].call(u.exports,u,u.exports,r),u.exports}var n={};return(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.toast=e.useToasterStore=e.useToaster=e.resolveValue=void 0;var t=r(946);Object.defineProperty(e,"toast",{enumerable:!0,get:function(){return t.toast}});var o=r(384);Object.defineProperty(e,"resolveValue",{enumerable:!0,get:function(){return o.resolveValue}});var u=r(871);Object.defineProperty(e,"useToaster",{enumerable:!0,get:function(){return u.useToaster}});var i=r(589);Object.defineProperty(e,"useToasterStore",{enumerable:!0,get:function(){return i.useStore}}),e.default=t.toast})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSyxXQUFjLE9BQU8yRixFQUFjbEMsVUFBWSxJQUNySCxJQUFJckIsRUFBVSxFQUFRLEtBQ3RCNU0sT0FBTytJLGVBQWV6SyxFQUFTLGtCQUFtQixDQUFFNFIsWUFBWSxFQUFNMUYsSUFBSyxXQUFjLE9BQU9vQyxFQUFRNUQsUUFBVSxJQUNsSDFLLEVBQUEsUUFBa0JxTSxFQUFRTiIsInNvdXJjZXMiOlsid2VicGFjazovL2NnLXRvYXN0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9jZy10b2FzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vY2ctdG9hc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2ctdG9hc3QvLi9zcmMvY29yZS9zdG9yZS50cyIsIndlYnBhY2s6Ly9jZy10b2FzdC8uL3NyYy9jb3JlL3RvYXN0LnRzIiwid2VicGFjazovL2NnLXRvYXN0Ly4vc3JjL2NvcmUvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vY2ctdG9hc3QvLi9zcmMvY29yZS91c2UtdG9hc3Rlci50cyIsIndlYnBhY2s6Ly9jZy10b2FzdC8uL3NyYy9jb3JlL3V0aWxzLnRzIiwid2VicGFjazovL2NnLXRvYXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NnLXRvYXN0Ly4vc3JjL2hlYWRsZXNzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImNnLXRvYXN0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImNnLXRvYXN0XCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZVN0b3JlID0gZXhwb3J0cy5kZWZhdWx0VGltZW91dHMgPSBleHBvcnRzLmRpc3BhdGNoID0gZXhwb3J0cy5yZWR1Y2VyID0gZXhwb3J0cy5UT0FTVF9FWFBJUkVfRElTTUlTU19ERUxBWSA9IGV4cG9ydHMuQWN0aW9uVHlwZSA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIFRPQVNUX0xJTUlUID0gMjA7XG52YXIgQWN0aW9uVHlwZTtcbihmdW5jdGlvbiAoQWN0aW9uVHlwZSkge1xuICAgIEFjdGlvblR5cGVbQWN0aW9uVHlwZVtcIkFERF9UT0FTVFwiXSA9IDBdID0gXCJBRERfVE9BU1RcIjtcbiAgICBBY3Rpb25UeXBlW0FjdGlvblR5cGVbXCJVUERBVEVfVE9BU1RcIl0gPSAxXSA9IFwiVVBEQVRFX1RPQVNUXCI7XG4gICAgQWN0aW9uVHlwZVtBY3Rpb25UeXBlW1wiVVBTRVJUX1RPQVNUXCJdID0gMl0gPSBcIlVQU0VSVF9UT0FTVFwiO1xuICAgIEFjdGlvblR5cGVbQWN0aW9uVHlwZVtcIkRJU01JU1NfVE9BU1RcIl0gPSAzXSA9IFwiRElTTUlTU19UT0FTVFwiO1xuICAgIEFjdGlvblR5cGVbQWN0aW9uVHlwZVtcIlJFTU9WRV9UT0FTVFwiXSA9IDRdID0gXCJSRU1PVkVfVE9BU1RcIjtcbiAgICBBY3Rpb25UeXBlW0FjdGlvblR5cGVbXCJTVEFSVF9QQVVTRVwiXSA9IDVdID0gXCJTVEFSVF9QQVVTRVwiO1xuICAgIEFjdGlvblR5cGVbQWN0aW9uVHlwZVtcIkVORF9QQVVTRVwiXSA9IDZdID0gXCJFTkRfUEFVU0VcIjtcbn0pKEFjdGlvblR5cGUgPSBleHBvcnRzLkFjdGlvblR5cGUgfHwgKGV4cG9ydHMuQWN0aW9uVHlwZSA9IHt9KSk7XG52YXIgdG9hc3RUaW1lb3V0cyA9IG5ldyBNYXAoKTtcbmV4cG9ydHMuVE9BU1RfRVhQSVJFX0RJU01JU1NfREVMQVkgPSAxMDAwO1xudmFyIGFkZFRvUmVtb3ZlUXVldWUgPSBmdW5jdGlvbiAodG9hc3RJZCkge1xuICAgIGlmICh0b2FzdFRpbWVvdXRzLmhhcyh0b2FzdElkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRvYXN0VGltZW91dHMuZGVsZXRlKHRvYXN0SWQpO1xuICAgICAgICAoMCwgZXhwb3J0cy5kaXNwYXRjaCkoe1xuICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5SRU1PVkVfVE9BU1QsXG4gICAgICAgICAgICB0b2FzdElkOiB0b2FzdElkLFxuICAgICAgICB9KTtcbiAgICB9LCBleHBvcnRzLlRPQVNUX0VYUElSRV9ESVNNSVNTX0RFTEFZKTtcbiAgICB0b2FzdFRpbWVvdXRzLnNldCh0b2FzdElkLCB0aW1lb3V0KTtcbn07XG52YXIgY2xlYXJGcm9tUmVtb3ZlUXVldWUgPSBmdW5jdGlvbiAodG9hc3RJZCkge1xuICAgIHZhciB0aW1lb3V0ID0gdG9hc3RUaW1lb3V0cy5nZXQodG9hc3RJZCk7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH1cbn07XG52YXIgcmVkdWNlciA9IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQUREX1RPQVNUOlxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgdG9hc3RzOiBfX3NwcmVhZEFycmF5KFthY3Rpb24udG9hc3RdLCBzdGF0ZS50b2FzdHMsIHRydWUpLnNsaWNlKDAsIFRPQVNUX0xJTUlUKSB9KTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlVQREFURV9UT0FTVDpcbiAgICAgICAgICAgIC8vICAhIFNpZGUgZWZmZWN0cyAhXG4gICAgICAgICAgICBpZiAoYWN0aW9uLnRvYXN0LmlkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJGcm9tUmVtb3ZlUXVldWUoYWN0aW9uLnRvYXN0LmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHRvYXN0czogc3RhdGUudG9hc3RzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gYWN0aW9uLnRvYXN0LmlkID8gX19hc3NpZ24oX19hc3NpZ24oe30sIHQpLCBhY3Rpb24udG9hc3QpIDogdDtcbiAgICAgICAgICAgICAgICB9KSB9KTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlVQU0VSVF9UT0FTVDpcbiAgICAgICAgICAgIHZhciB0b2FzdF8xID0gYWN0aW9uLnRvYXN0O1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnRvYXN0cy5maW5kKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LmlkID09PSB0b2FzdF8xLmlkOyB9KVxuICAgICAgICAgICAgICAgID8gKDAsIGV4cG9ydHMucmVkdWNlcikoc3RhdGUsIHsgdHlwZTogQWN0aW9uVHlwZS5VUERBVEVfVE9BU1QsIHRvYXN0OiB0b2FzdF8xIH0pXG4gICAgICAgICAgICAgICAgOiAoMCwgZXhwb3J0cy5yZWR1Y2VyKShzdGF0ZSwgeyB0eXBlOiBBY3Rpb25UeXBlLkFERF9UT0FTVCwgdG9hc3Q6IHRvYXN0XzEgfSk7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5ESVNNSVNTX1RPQVNUOlxuICAgICAgICAgICAgdmFyIHRvYXN0SWRfMSA9IGFjdGlvbi50b2FzdElkO1xuICAgICAgICAgICAgLy8gISBTaWRlIGVmZmVjdHMgISAtIFRoaXMgY291bGQgYmUgZXhlY3JhdGVkIGludG8gYSBkaXNtaXNzVG9hc3QoKSBhY3Rpb24sIGJ1dCBJJ2xsIGtlZXAgaXQgaGVyZSBmb3Igc2ltcGxpY2l0eVxuICAgICAgICAgICAgaWYgKHRvYXN0SWRfMSkge1xuICAgICAgICAgICAgICAgIGFkZFRvUmVtb3ZlUXVldWUodG9hc3RJZF8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRvYXN0cy5mb3JFYWNoKGZ1bmN0aW9uICh0b2FzdCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRUb1JlbW92ZVF1ZXVlKHRvYXN0LmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHRvYXN0czogc3RhdGUudG9hc3RzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gdG9hc3RJZF8xIHx8IHRvYXN0SWRfMSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0KSwgeyB2aXNpYmxlOiBmYWxzZSB9KSA6IHQ7XG4gICAgICAgICAgICAgICAgfSkgfSk7XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5SRU1PVkVfVE9BU1Q6XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnRvYXN0SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHRvYXN0czogW10gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyB0b2FzdHM6IHN0YXRlLnRvYXN0cy5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuaWQgIT09IGFjdGlvbi50b2FzdElkOyB9KSB9KTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNUQVJUX1BBVVNFOlxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgcGF1c2VkQXQ6IGFjdGlvbi50aW1lIH0pO1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuRU5EX1BBVVNFOlxuICAgICAgICAgICAgdmFyIGRpZmZfMSA9IGFjdGlvbi50aW1lIC0gKHN0YXRlLnBhdXNlZEF0IHx8IDApO1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZSksIHsgcGF1c2VkQXQ6IHVuZGVmaW5lZCwgdG9hc3RzOiBzdGF0ZS50b2FzdHMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIHQpLCB7IHBhdXNlRHVyYXRpb246IHQucGF1c2VEdXJhdGlvbiArIGRpZmZfMSB9KSk7IH0pIH0pO1xuICAgIH1cbn07XG5leHBvcnRzLnJlZHVjZXIgPSByZWR1Y2VyO1xudmFyIGxpc3RlbmVycyA9IFtdO1xudmFyIG1lbW9yeVN0YXRlID0geyB0b2FzdHM6IFtdLCBwYXVzZWRBdDogdW5kZWZpbmVkIH07XG52YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgbWVtb3J5U3RhdGUgPSAoMCwgZXhwb3J0cy5yZWR1Y2VyKShtZW1vcnlTdGF0ZSwgYWN0aW9uKTtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIobWVtb3J5U3RhdGUpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcbmV4cG9ydHMuZGVmYXVsdFRpbWVvdXRzID0ge1xuICAgIGJsYW5rOiA0MDAwLFxuICAgIGVycm9yOiA0MDAwLFxuICAgIHN1Y2Nlc3M6IDIwMDAsXG4gICAgbG9hZGluZzogSW5maW5pdHksXG4gICAgY3VzdG9tOiA0MDAwLFxufTtcbnZhciB1c2VTdG9yZSA9IGZ1bmN0aW9uICh0b2FzdE9wdGlvbnMpIHtcbiAgICBpZiAodG9hc3RPcHRpb25zID09PSB2b2lkIDApIHsgdG9hc3RPcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkobWVtb3J5U3RhdGUpLCBzdGF0ZSA9IF9hWzBdLCBzZXRTdGF0ZSA9IF9hWzFdO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChzZXRTdGF0ZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihzZXRTdGF0ZSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtzdGF0ZV0pO1xuICAgIHZhciBtZXJnZWRUb2FzdHMgPSBzdGF0ZS50b2FzdHMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIHRvYXN0T3B0aW9ucyksIHRvYXN0T3B0aW9uc1t0LnR5cGVdKSwgdCksIHsgZHVyYXRpb246IHQuZHVyYXRpb24gfHxcbiAgICAgICAgICAgICAgICAoKF9hID0gdG9hc3RPcHRpb25zW3QudHlwZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kdXJhdGlvbikgfHxcbiAgICAgICAgICAgICAgICAodG9hc3RPcHRpb25zID09PSBudWxsIHx8IHRvYXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9hc3RPcHRpb25zLmR1cmF0aW9uKSB8fFxuICAgICAgICAgICAgICAgIGV4cG9ydHMuZGVmYXVsdFRpbWVvdXRzW3QudHlwZV0sIHN0eWxlOiBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdG9hc3RPcHRpb25zLnN0eWxlKSwgKF9iID0gdG9hc3RPcHRpb25zW3QudHlwZV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdHlsZSksIHQuc3R5bGUpIH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlKSwgeyB0b2FzdHM6IG1lcmdlZFRvYXN0cyB9KTtcbn07XG5leHBvcnRzLnVzZVN0b3JlID0gdXNlU3RvcmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvYXN0ID0gdm9pZCAwO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgc3RvcmVfMSA9IHJlcXVpcmUoXCIuL3N0b3JlXCIpO1xudmFyIGNyZWF0ZVRvYXN0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHR5cGUsIG9wdHMpIHtcbiAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAnYmxhbmsnOyB9XG4gICAgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7IGNyZWF0ZWRBdDogRGF0ZS5ub3coKSwgdmlzaWJsZTogdHJ1ZSwgdHlwZTogdHlwZSwgYXJpYVByb3BzOiB7XG4gICAgICAgICAgICByb2xlOiAnc3RhdHVzJyxcbiAgICAgICAgICAgICdhcmlhLWxpdmUnOiAncG9saXRlJyxcbiAgICAgICAgfSwgbWVzc2FnZTogbWVzc2FnZSwgcGF1c2VEdXJhdGlvbjogMCB9LCBvcHRzKSwgeyBpZDogKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5pZCkgfHwgKDAsIHV0aWxzXzEuZ2VuSWQpKCkgfSkpO1xufTtcbnZhciBjcmVhdGVIYW5kbGVyID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRvYXN0ID0gY3JlYXRlVG9hc3QobWVzc2FnZSwgdHlwZSwgb3B0aW9ucyk7XG4gICAgICAgICgwLCBzdG9yZV8xLmRpc3BhdGNoKSh7IHR5cGU6IHN0b3JlXzEuQWN0aW9uVHlwZS5VUFNFUlRfVE9BU1QsIHRvYXN0OiB0b2FzdCB9KTtcbiAgICAgICAgcmV0dXJuIHRvYXN0LmlkO1xuICAgIH07XG59O1xudmFyIHRvYXN0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdHMpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFuZGxlcignYmxhbmsnKShtZXNzYWdlLCBvcHRzKTtcbn07XG5leHBvcnRzLnRvYXN0ID0gdG9hc3Q7XG50b2FzdC5lcnJvciA9IGNyZWF0ZUhhbmRsZXIoJ2Vycm9yJyk7XG50b2FzdC5zdWNjZXNzID0gY3JlYXRlSGFuZGxlcignc3VjY2VzcycpO1xudG9hc3QubG9hZGluZyA9IGNyZWF0ZUhhbmRsZXIoJ2xvYWRpbmcnKTtcbnRvYXN0LmN1c3RvbSA9IGNyZWF0ZUhhbmRsZXIoJ2N1c3RvbScpO1xudG9hc3QuZGlzbWlzcyA9IGZ1bmN0aW9uICh0b2FzdElkKSB7XG4gICAgKDAsIHN0b3JlXzEuZGlzcGF0Y2gpKHtcbiAgICAgICAgdHlwZTogc3RvcmVfMS5BY3Rpb25UeXBlLkRJU01JU1NfVE9BU1QsXG4gICAgICAgIHRvYXN0SWQ6IHRvYXN0SWQsXG4gICAgfSk7XG59O1xudG9hc3QucmVtb3ZlID0gZnVuY3Rpb24gKHRvYXN0SWQpIHtcbiAgICByZXR1cm4gKDAsIHN0b3JlXzEuZGlzcGF0Y2gpKHsgdHlwZTogc3RvcmVfMS5BY3Rpb25UeXBlLlJFTU9WRV9UT0FTVCwgdG9hc3RJZDogdG9hc3RJZCB9KTtcbn07XG50b2FzdC5wcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UsIG1zZ3MsIG9wdHMpIHtcbiAgICB2YXIgaWQgPSB0b2FzdC5sb2FkaW5nKG1zZ3MubG9hZGluZywgX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdHMpLCBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMubG9hZGluZykpO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHApIHtcbiAgICAgICAgdG9hc3Quc3VjY2VzcygoMCwgdHlwZXNfMS5yZXNvbHZlVmFsdWUpKG1zZ3Muc3VjY2VzcywgcCksIF9fYXNzaWduKF9fYXNzaWduKHsgaWQ6IGlkIH0sIG9wdHMpLCBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuc3VjY2VzcykpO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoKDAsIHR5cGVzXzEucmVzb2x2ZVZhbHVlKShtc2dzLmVycm9yLCBlKSwgX19hc3NpZ24oX19hc3NpZ24oeyBpZDogaWQgfSwgb3B0cyksIG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5lcnJvcikpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlVmFsdWUgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWxPckZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWxPckZ1bmN0aW9uID09PSAnZnVuY3Rpb24nO1xufTtcbnZhciByZXNvbHZlVmFsdWUgPSBmdW5jdGlvbiAodmFsT3JGdW5jdGlvbiwgYXJnKSB7IHJldHVybiAoaXNGdW5jdGlvbih2YWxPckZ1bmN0aW9uKSA/IHZhbE9yRnVuY3Rpb24oYXJnKSA6IHZhbE9yRnVuY3Rpb24pOyB9O1xuZXhwb3J0cy5yZXNvbHZlVmFsdWUgPSByZXNvbHZlVmFsdWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlVG9hc3RlciA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIHN0b3JlXzEgPSByZXF1aXJlKFwiLi9zdG9yZVwiKTtcbnZhciB0b2FzdF8xID0gcmVxdWlyZShcIi4vdG9hc3RcIik7XG52YXIgdXBkYXRlSGVpZ2h0ID0gZnVuY3Rpb24gKHRvYXN0SWQsIGhlaWdodCkge1xuICAgICgwLCBzdG9yZV8xLmRpc3BhdGNoKSh7XG4gICAgICAgIHR5cGU6IHN0b3JlXzEuQWN0aW9uVHlwZS5VUERBVEVfVE9BU1QsXG4gICAgICAgIHRvYXN0OiB7IGlkOiB0b2FzdElkLCBoZWlnaHQ6IGhlaWdodCB9LFxuICAgIH0pO1xufTtcbnZhciBzdGFydFBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICgwLCBzdG9yZV8xLmRpc3BhdGNoKSh7XG4gICAgICAgIHR5cGU6IHN0b3JlXzEuQWN0aW9uVHlwZS5TVEFSVF9QQVVTRSxcbiAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcbiAgICB9KTtcbn07XG52YXIgdXNlVG9hc3RlciA9IGZ1bmN0aW9uICh0b2FzdE9wdGlvbnMpIHtcbiAgICB2YXIgX2EgPSAoMCwgc3RvcmVfMS51c2VTdG9yZSkodG9hc3RPcHRpb25zKSwgdG9hc3RzID0gX2EudG9hc3RzLCBwYXVzZWRBdCA9IF9hLnBhdXNlZEF0O1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocGF1c2VkQXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIHRpbWVvdXRzID0gdG9hc3RzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgaWYgKHQuZHVyYXRpb24gPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGR1cmF0aW9uTGVmdCA9ICh0LmR1cmF0aW9uIHx8IDApICsgdC5wYXVzZUR1cmF0aW9uIC0gKG5vdyAtIHQuY3JlYXRlZEF0KTtcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbkxlZnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHQudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdF8xLnRvYXN0LmRpc21pc3ModC5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvYXN0XzEudG9hc3QuZGlzbWlzcyh0LmlkKTsgfSwgZHVyYXRpb25MZWZ0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lb3V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0aW1lb3V0KSB7IHJldHVybiB0aW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0KTsgfSk7XG4gICAgICAgIH07XG4gICAgfSwgW3RvYXN0cywgcGF1c2VkQXRdKTtcbiAgICB2YXIgZW5kUGF1c2UgPSAoMCwgcmVhY3RfMS51c2VDYWxsYmFjaykoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocGF1c2VkQXQpIHtcbiAgICAgICAgICAgICgwLCBzdG9yZV8xLmRpc3BhdGNoKSh7IHR5cGU6IHN0b3JlXzEuQWN0aW9uVHlwZS5FTkRfUEFVU0UsIHRpbWU6IERhdGUubm93KCkgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbcGF1c2VkQXRdKTtcbiAgICB2YXIgY2FsY3VsYXRlT2Zmc2V0ID0gKDAsIHJlYWN0XzEudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICh0b2FzdCwgb3B0cykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfYiA9IG9wdHMgfHwge30sIF9jID0gX2IucmV2ZXJzZU9yZGVyLCByZXZlcnNlT3JkZXIgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYi5ndXR0ZXIsIGd1dHRlciA9IF9kID09PSB2b2lkIDAgPyA4IDogX2QsIGRlZmF1bHRQb3NpdGlvbiA9IF9iLmRlZmF1bHRQb3NpdGlvbjtcbiAgICAgICAgdmFyIHJlbGV2YW50VG9hc3RzID0gdG9hc3RzLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuICh0LnBvc2l0aW9uIHx8IGRlZmF1bHRQb3NpdGlvbikgPT09XG4gICAgICAgICAgICAgICAgKHRvYXN0LnBvc2l0aW9uIHx8IGRlZmF1bHRQb3NpdGlvbikgJiYgdC5oZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdG9hc3RJbmRleCA9IHJlbGV2YW50VG9hc3RzLmZpbmRJbmRleChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5pZCA9PT0gdG9hc3QuaWQ7IH0pO1xuICAgICAgICB2YXIgdG9hc3RzQmVmb3JlID0gcmVsZXZhbnRUb2FzdHMuZmlsdGVyKGZ1bmN0aW9uICh0b2FzdCwgaSkgeyByZXR1cm4gaSA8IHRvYXN0SW5kZXggJiYgdG9hc3QudmlzaWJsZTsgfSkubGVuZ3RoO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gKF9hID0gcmVsZXZhbnRUb2FzdHNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQudmlzaWJsZTsgfSkpXG4gICAgICAgICAgICAuc2xpY2UuYXBwbHkoX2EsIChyZXZlcnNlT3JkZXIgPyBbdG9hc3RzQmVmb3JlICsgMV0gOiBbMCwgdG9hc3RzQmVmb3JlXSkpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCB0KSB7IHJldHVybiBhY2MgKyAodC5oZWlnaHQgfHwgMCkgKyBndXR0ZXI7IH0sIDApO1xuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH0sIFt0b2FzdHNdKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b2FzdHM6IHRvYXN0cyxcbiAgICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgICAgIHVwZGF0ZUhlaWdodDogdXBkYXRlSGVpZ2h0LFxuICAgICAgICAgICAgc3RhcnRQYXVzZTogc3RhcnRQYXVzZSxcbiAgICAgICAgICAgIGVuZFBhdXNlOiBlbmRQYXVzZSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZU9mZnNldDogY2FsY3VsYXRlT2Zmc2V0LFxuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0cy51c2VUb2FzdGVyID0gdXNlVG9hc3RlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVmZXJzUmVkdWNlZE1vdGlvbiA9IGV4cG9ydHMuZ2VuSWQgPSB2b2lkIDA7XG5leHBvcnRzLmdlbklkID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoKytjb3VudCkudG9TdHJpbmcoKTtcbiAgICB9O1xufSkoKTtcbmV4cG9ydHMucHJlZmVyc1JlZHVjZWRNb3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIENhY2hlIHJlc3VsdFxuICAgIHZhciBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlZHVjZU1vdGlvbiA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgbWVkaWFRdWVyeSA9IG1hdGNoTWVkaWEoJyhwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpJyk7XG4gICAgICAgICAgICBzaG91bGRSZWR1Y2VNb3Rpb24gPSAhbWVkaWFRdWVyeSB8fCBtZWRpYVF1ZXJ5Lm1hdGNoZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3VsZFJlZHVjZU1vdGlvbjtcbiAgICB9O1xufSkoKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9hc3QgPSBleHBvcnRzLnVzZVRvYXN0ZXJTdG9yZSA9IGV4cG9ydHMudXNlVG9hc3RlciA9IGV4cG9ydHMucmVzb2x2ZVZhbHVlID0gdm9pZCAwO1xudmFyIHRvYXN0XzEgPSByZXF1aXJlKFwiLi4vY29yZS90b2FzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b2FzdF8xLnRvYXN0OyB9IH0pO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vY29yZS90eXBlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc29sdmVWYWx1ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5yZXNvbHZlVmFsdWU7IH0gfSk7XG52YXIgdXNlX3RvYXN0ZXJfMSA9IHJlcXVpcmUoXCIuLi9jb3JlL3VzZS10b2FzdGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlVG9hc3RlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNlX3RvYXN0ZXJfMS51c2VUb2FzdGVyOyB9IH0pO1xudmFyIHN0b3JlXzEgPSByZXF1aXJlKFwiLi4vY29yZS9zdG9yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVRvYXN0ZXJTdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmVfMS51c2VTdG9yZTsgfSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvYXN0XzEudG9hc3Q7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsImwiLCJTeW1ib2wiLCJmb3IiLCJuIiwicCIsInEiLCJyIiwidCIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsIml0ZXJhdG9yIiwiQiIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJDIiwiT2JqZWN0IiwiYXNzaWduIiwiRCIsIkUiLCJhIiwiYiIsImUiLCJ0aGlzIiwicHJvcHMiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJIIiwiY29uc3RydWN0b3IiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJBcnJheSIsImlzQXJyYXkiLCJKIiwiaGFzT3duUHJvcGVydHkiLCJLIiwiY3VycmVudCIsIkwiLCJrZXkiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJkIiwiYyIsImsiLCJoIiwiY2FsbCIsImciLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjaGlsZHJlbiIsImYiLCJtIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwiX293bmVyIiwiTyIsIlAiLCJRIiwicmVwbGFjZSIsImVzY2FwZSIsInRvU3RyaW5nIiwiUiIsIk4iLCJwdXNoIiwiQSIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJTdHJpbmciLCJrZXlzIiwiam9pbiIsIlMiLCJUIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ0aGVuIiwiZGVmYXVsdCIsIlUiLCJWIiwidHJhbnNpdGlvbiIsIlciLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJSZWFjdEN1cnJlbnRPd25lciIsIkNoaWxkcmVuIiwibWFwIiwiZm9yRWFjaCIsImFwcGx5IiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsIl9jb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJiaW5kIiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJtZW1vIiwiY29tcGFyZSIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlRWZmZWN0IiwidXNlSWQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlVHJhbnNpdGlvbiIsInZlcnNpb24iLCJfX2Fzc2lnbiIsInMiLCJpIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhciIsInNsaWNlIiwiY29uY2F0IiwiZGVmaW5lUHJvcGVydHkiLCJ1c2VTdG9yZSIsImRlZmF1bHRUaW1lb3V0cyIsImRpc3BhdGNoIiwicmVkdWNlciIsIlRPQVNUX0VYUElSRV9ESVNNSVNTX0RFTEFZIiwiQWN0aW9uVHlwZSIsInJlYWN0XzEiLCJ0b2FzdFRpbWVvdXRzIiwiTWFwIiwiYWRkVG9SZW1vdmVRdWV1ZSIsInRvYXN0SWQiLCJoYXMiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImRlbGV0ZSIsIlJFTU9WRV9UT0FTVCIsInNldCIsInN0YXRlIiwiYWN0aW9uIiwiQUREX1RPQVNUIiwidG9hc3RzIiwidG9hc3QiLCJVUERBVEVfVE9BU1QiLCJpZCIsImdldCIsImNsZWFyVGltZW91dCIsIlVQU0VSVF9UT0FTVCIsInRvYXN0XzEiLCJmaW5kIiwiRElTTUlTU19UT0FTVCIsInRvYXN0SWRfMSIsInVuZGVmaW5lZCIsInZpc2libGUiLCJmaWx0ZXIiLCJTVEFSVF9QQVVTRSIsInBhdXNlZEF0IiwidGltZSIsIkVORF9QQVVTRSIsImRpZmZfMSIsInBhdXNlRHVyYXRpb24iLCJsaXN0ZW5lcnMiLCJtZW1vcnlTdGF0ZSIsImxpc3RlbmVyIiwiYmxhbmsiLCJlcnJvciIsInN1Y2Nlc3MiLCJsb2FkaW5nIiwiSW5maW5pdHkiLCJjdXN0b20iLCJ0b2FzdE9wdGlvbnMiLCJfYSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIm1lcmdlZFRvYXN0cyIsIl9iIiwiZHVyYXRpb24iLCJzdHlsZSIsInR5cGVzXzEiLCJ1dGlsc18xIiwic3RvcmVfMSIsImNyZWF0ZUhhbmRsZXIiLCJtZXNzYWdlIiwib3B0aW9ucyIsIm9wdHMiLCJjcmVhdGVkQXQiLCJEYXRlIiwibm93IiwiYXJpYVByb3BzIiwicm9sZSIsImdlbklkIiwiY3JlYXRlVG9hc3QiLCJkaXNtaXNzIiwicmVtb3ZlIiwicHJvbWlzZSIsIm1zZ3MiLCJyZXNvbHZlVmFsdWUiLCJjYXRjaCIsInZhbE9yRnVuY3Rpb24iLCJhcmciLCJpc0Z1bmN0aW9uIiwidXNlVG9hc3RlciIsInVwZGF0ZUhlaWdodCIsImhlaWdodCIsInN0YXJ0UGF1c2UiLCJ0aW1lb3V0cyIsImR1cmF0aW9uTGVmdCIsImVuZFBhdXNlIiwiY2FsY3VsYXRlT2Zmc2V0IiwiX2MiLCJyZXZlcnNlT3JkZXIiLCJfZCIsImd1dHRlciIsImRlZmF1bHRQb3NpdGlvbiIsInJlbGV2YW50VG9hc3RzIiwicG9zaXRpb24iLCJ0b2FzdEluZGV4IiwiZmluZEluZGV4IiwidG9hc3RzQmVmb3JlIiwicmVkdWNlIiwiYWNjIiwiaGFuZGxlcnMiLCJzaG91bGRSZWR1Y2VNb3Rpb24iLCJwcmVmZXJzUmVkdWNlZE1vdGlvbiIsIndpbmRvdyIsIm1lZGlhUXVlcnkiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJ1c2VUb2FzdGVyU3RvcmUiLCJlbnVtZXJhYmxlIiwidXNlX3RvYXN0ZXJfMSJdLCJzb3VyY2VSb290IjoiIn0=
/*! For license information please see bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.cg_toast=t():e.cg_toast=t()}(self,(()=>{return e={408:(e,t)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),l=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b=Object.assign,m={};function g(e,t,r){this.props=e,this.context=t,this.refs=m,this.updater=r||y}function h(){}function v(e,t,r){this.props=e,this.context=t,this.refs=m,this.updater=r||y}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},h.prototype=g.prototype;var O=v.prototype=new h;O.constructor=v,b(O,g.prototype),O.isPureReactComponent=!0;var _=Array.isArray,j=Object.prototype.hasOwnProperty,T={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var o,a={},s=null,i=null;if(null!=t)for(o in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(s=""+t.key),t)j.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){for(var u=Array(c),l=0;l<c;l++)u[l]=arguments[l+2];a.children=u}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:r,type:e,key:s,ref:i,props:a,_owner:T.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var P=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function w(e,t,o,a,s){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var c=!1;if(null===e)c=!0;else switch(i){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case r:case n:c=!0}}if(c)return s=s(c=e),e=""===a?"."+A(c,0):a,_(s)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),w(s,t,o,"",(function(e){return e}))):null!=s&&(x(s)&&(s=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,o+(!s.key||c&&c.key===s.key?"":(""+s.key).replace(P,"$&/")+"/")+e)),t.push(s)),1;if(c=0,a=""===a?".":a+":",_(e))for(var u=0;u<e.length;u++){var l=a+A(i=e[u],u);c+=w(i,t,o,l,s)}else if(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof l)for(e=l.call(e),u=0;!(i=e.next()).done;)c+=w(i=i.value,t,o,l=a+A(i,u++),s);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function I(e,t,r){if(null==e)return e;var n=[],o=0;return w(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function k(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},M={transition:null},R={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:M,ReactCurrentOwner:T};t.Children={map:I,forEach:function(e,t,r){I(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=s,t.PureComponent=v,t.StrictMode=a,t.Suspense=l,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=b({},e.props),a=e.key,s=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,i=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)j.call(t,u)&&!S.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var l=0;l<u;l++)c[l]=arguments[l+2];o.children=c}return{$$typeof:r,type:e.type,key:a,ref:s,props:o,_owner:i}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:k}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,r){return D.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,r){return D.current.useReducer(e,t,r)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return D.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},294:(e,t,r)=>{"use strict";e.exports=r(408)},796:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CheckmarkIcon=void 0;const n=r(925),o=n.keyframes`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`,a=n.keyframes`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;t.CheckmarkIcon=(0,n.styled)("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${o} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${a} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${e=>e.secondary||"#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`},967:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorIcon=void 0;const n=r(925),o=n.keyframes`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`,a=n.keyframes`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`,s=n.keyframes`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;t.ErrorIcon=(0,n.styled)("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${o} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${a} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${e=>e.secondary||"#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${s} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`},418:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoaderIcon=void 0;const n=r(925),o=n.keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;t.LoaderIcon=(0,n.styled)("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${e=>e.secondary||"#e0e0e0"};
  border-right-color: ${e=>e.primary||"#616161"};
  animation: ${o} 1s linear infinite;
`},839:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ToastBar=void 0;const s=a(r(294)),i=r(925),c=r(384),u=r(773),l=r(488),d=e=>`\n0% {transform: translate3d(0,${-200*e}%,0) scale(.6); opacity:.5;}\n100% {transform: translate3d(0,0,0) scale(1); opacity:1;}\n`,f=e=>`\n0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}\n100% {transform: translate3d(0,${-150*e}%,-1px) scale(.6); opacity:0;}\n`,p=(0,i.styled)("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`,y=(0,i.styled)("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;t.ToastBar=s.memo((({toast:e,position:t,style:r,children:n})=>{const o=e.height?((e,t)=>{const r=e.includes("top")?1:-1,[n,o]=(0,l.prefersReducedMotion)()?["0%{opacity:0;} 100%{opacity:1;}","0%{opacity:1;} 100%{opacity:0;}"]:[d(r),f(r)];return{animation:t?`${(0,i.keyframes)(n)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards`:`${(0,i.keyframes)(o)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`}})(e.position||t||"top-center",e.visible):{opacity:0},a=s.createElement(u.ToastIcon,{toast:e}),b=s.createElement(y,Object.assign({},e.ariaProps),(0,c.resolveValue)(e.message,e));return s.createElement(p,{className:e.className,style:Object.assign(Object.assign(Object.assign({},o),r),e.style)},"function"==typeof n?n({icon:a,message:b}):s.createElement(s.Fragment,null,a,b))}))},773:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ToastIcon=t.AnimatedIconWrapper=void 0;const s=a(r(294)),i=r(925),c=r(967),u=r(418),l=r(796),d=(0,i.styled)("div")`
  position: absolute;
`,f=(0,i.styled)("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`,p=i.keyframes`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;t.AnimatedIconWrapper=(0,i.styled)("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${p} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`,t.ToastIcon=({toast:e})=>{const{icon:r,type:n,iconTheme:o}=e;return void 0!==r?"string"==typeof r?s.createElement(t.AnimatedIconWrapper,null,r):r:"blank"===n?null:s.createElement(f,null,s.createElement(u.LoaderIcon,Object.assign({},o)),"loading"!==n&&s.createElement(d,null,"error"===n?s.createElement(c.ErrorIcon,Object.assign({},o)):s.createElement(l.CheckmarkIcon,Object.assign({},o))))}},354:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Toaster=void 0;const s=r(925),i=a(r(294)),c=r(384),u=r(871),l=r(488),d=r(839);(0,s.setup)(i.createElement);const f=({id:e,className:t,style:r,onHeightUpdate:n,children:o})=>{const a=i.useCallback((t=>{if(t){const r=()=>{const r=t.getBoundingClientRect().height;n(e,r)};r(),new MutationObserver(r).observe(t,{subtree:!0,childList:!0,characterData:!0})}}),[e,n]);return i.createElement("div",{ref:a,className:t,style:r},o)},p=s.css`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;t.Toaster=({reverseOrder:e,position:t="top-center",toastOptions:r,gutter:n,children:o,containerStyle:a,containerClassName:s})=>{const{toasts:y,handlers:b}=(0,u.useToaster)(r);return i.createElement("div",{style:Object.assign({position:"fixed",zIndex:9999,top:16,left:16,right:16,bottom:16,pointerEvents:"none"},a),className:s,onMouseEnter:b.startPause,onMouseLeave:b.endPause},y.map((r=>{const a=r.position||t,s=((e,t)=>{const r=e.includes("top"),n=r?{top:0}:{bottom:0},o=e.includes("center")?{justifyContent:"center"}:e.includes("right")?{justifyContent:"flex-end"}:{};return Object.assign(Object.assign({left:0,right:0,display:"flex",position:"absolute",transition:(0,l.prefersReducedMotion)()?void 0:"all 230ms cubic-bezier(.21,1.02,.73,1)",transform:`translateY(${t*(r?1:-1)}px)`},n),o)})(a,b.calculateOffset(r,{reverseOrder:e,gutter:n,defaultPosition:t}));return i.createElement(f,{id:r.id,key:r.id,onHeightUpdate:b.updateHeight,className:r.visible?p:"",style:s},"custom"===r.type?(0,c.resolveValue)(r.message,r):o?o(r):i.createElement(d.ToastBar,{toast:r,position:a}))})))}},589:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useStore=t.defaultTimeouts=t.dispatch=t.reducer=t.TOAST_EXPIRE_DISMISS_DELAY=t.ActionType=void 0;const n=r(294);var o;!function(e){e[e.ADD_TOAST=0]="ADD_TOAST",e[e.UPDATE_TOAST=1]="UPDATE_TOAST",e[e.UPSERT_TOAST=2]="UPSERT_TOAST",e[e.DISMISS_TOAST=3]="DISMISS_TOAST",e[e.REMOVE_TOAST=4]="REMOVE_TOAST",e[e.START_PAUSE=5]="START_PAUSE",e[e.END_PAUSE=6]="END_PAUSE"}(o=t.ActionType||(t.ActionType={}));const a=new Map;t.TOAST_EXPIRE_DISMISS_DELAY=1e3;const s=e=>{if(a.has(e))return;const r=setTimeout((()=>{a.delete(e),(0,t.dispatch)({type:o.REMOVE_TOAST,toastId:e})}),t.TOAST_EXPIRE_DISMISS_DELAY);a.set(e,r)};t.reducer=(e,r)=>{switch(r.type){case o.ADD_TOAST:return Object.assign(Object.assign({},e),{toasts:[r.toast,...e.toasts].slice(0,20)});case o.UPDATE_TOAST:return r.toast.id&&(e=>{const t=a.get(e);t&&clearTimeout(t)})(r.toast.id),Object.assign(Object.assign({},e),{toasts:e.toasts.map((e=>e.id===r.toast.id?Object.assign(Object.assign({},e),r.toast):e))});case o.UPSERT_TOAST:const{toast:n}=r;return e.toasts.find((e=>e.id===n.id))?(0,t.reducer)(e,{type:o.UPDATE_TOAST,toast:n}):(0,t.reducer)(e,{type:o.ADD_TOAST,toast:n});case o.DISMISS_TOAST:const{toastId:i}=r;return i?s(i):e.toasts.forEach((e=>{s(e.id)})),Object.assign(Object.assign({},e),{toasts:e.toasts.map((e=>e.id===i||void 0===i?Object.assign(Object.assign({},e),{visible:!1}):e))});case o.REMOVE_TOAST:return void 0===r.toastId?Object.assign(Object.assign({},e),{toasts:[]}):Object.assign(Object.assign({},e),{toasts:e.toasts.filter((e=>e.id!==r.toastId))});case o.START_PAUSE:return Object.assign(Object.assign({},e),{pausedAt:r.time});case o.END_PAUSE:const c=r.time-(e.pausedAt||0);return Object.assign(Object.assign({},e),{pausedAt:void 0,toasts:e.toasts.map((e=>Object.assign(Object.assign({},e),{pauseDuration:e.pauseDuration+c})))})}};const i=[];let c={toasts:[],pausedAt:void 0};t.dispatch=e=>{c=(0,t.reducer)(c,e),i.forEach((e=>{e(c)}))},t.defaultTimeouts={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3},t.useStore=(e={})=>{const[r,o]=(0,n.useState)(c);(0,n.useEffect)((()=>(i.push(o),()=>{const e=i.indexOf(o);e>-1&&i.splice(e,1)})),[r]);const a=r.toasts.map((r=>{var n,o;return Object.assign(Object.assign(Object.assign(Object.assign({},e),e[r.type]),r),{duration:r.duration||(null===(n=e[r.type])||void 0===n?void 0:n.duration)||(null==e?void 0:e.duration)||t.defaultTimeouts[r.type],style:Object.assign(Object.assign(Object.assign({},e.style),null===(o=e[r.type])||void 0===o?void 0:o.style),r.style)})}));return Object.assign(Object.assign({},r),{toasts:a})}},946:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toast=void 0;const n=r(384),o=r(488),a=r(589),s=e=>(t,r)=>{const n=((e,t="blank",r)=>Object.assign(Object.assign({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0},r),{id:(null==r?void 0:r.id)||(0,o.genId)()}))(t,e,r);return(0,a.dispatch)({type:a.ActionType.UPSERT_TOAST,toast:n}),n.id},i=(e,t)=>s("blank")(e,t);t.toast=i,i.error=s("error"),i.success=s("success"),i.loading=s("loading"),i.custom=s("custom"),i.dismiss=e=>{(0,a.dispatch)({type:a.ActionType.DISMISS_TOAST,toastId:e})},i.remove=e=>(0,a.dispatch)({type:a.ActionType.REMOVE_TOAST,toastId:e}),i.promise=(e,t,r)=>{const o=i.loading(t.loading,Object.assign(Object.assign({},r),null==r?void 0:r.loading));return e.then((e=>(i.success((0,n.resolveValue)(t.success,e),Object.assign(Object.assign({id:o},r),null==r?void 0:r.success)),e))).catch((e=>{i.error((0,n.resolveValue)(t.error,e),Object.assign(Object.assign({id:o},r),null==r?void 0:r.error))})),e}},384:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveValue=void 0,t.resolveValue=(e,t)=>(e=>"function"==typeof e)(e)?e(t):e},871:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useToaster=void 0;const n=r(294),o=r(589),a=r(946),s=(e,t)=>{(0,o.dispatch)({type:o.ActionType.UPDATE_TOAST,toast:{id:e,height:t}})},i=()=>{(0,o.dispatch)({type:o.ActionType.START_PAUSE,time:Date.now()})};t.useToaster=e=>{const{toasts:t,pausedAt:r}=(0,o.useStore)(e);(0,n.useEffect)((()=>{if(r)return;const e=Date.now(),n=t.map((t=>{if(t.duration===1/0)return;const r=(t.duration||0)+t.pauseDuration-(e-t.createdAt);if(!(r<0))return setTimeout((()=>a.toast.dismiss(t.id)),r);t.visible&&a.toast.dismiss(t.id)}));return()=>{n.forEach((e=>e&&clearTimeout(e)))}}),[t,r]);const c=(0,n.useCallback)((()=>{r&&(0,o.dispatch)({type:o.ActionType.END_PAUSE,time:Date.now()})}),[r]),u=(0,n.useCallback)(((e,r)=>{const{reverseOrder:n=!1,gutter:o=8,defaultPosition:a}=r||{},s=t.filter((t=>(t.position||a)===(e.position||a)&&t.height)),i=s.findIndex((t=>t.id===e.id)),c=s.filter(((e,t)=>t<i&&e.visible)).length;return s.filter((e=>e.visible)).slice(...n?[c+1]:[0,c]).reduce(((e,t)=>e+(t.height||0)+o),0)}),[t]);return{toasts:t,handlers:{updateHeight:s,startPause:i,endPause:c,calculateOffset:u}}}},488:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prefersReducedMotion=t.genId=void 0,t.genId=(()=>{let e=0;return()=>(++e).toString()})(),t.prefersReducedMotion=(()=>{let e;return()=>{if(void 0===e&&"undefined"!=typeof window){const t=matchMedia("(prefers-reduced-motion: reduce)");e=!t||t.matches}return e}})()},817:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toast=t.useToasterStore=t.useToaster=t.resolveValue=void 0;const n=r(946);Object.defineProperty(t,"toast",{enumerable:!0,get:function(){return n.toast}});var o=r(384);Object.defineProperty(t,"resolveValue",{enumerable:!0,get:function(){return o.resolveValue}});var a=r(871);Object.defineProperty(t,"useToaster",{enumerable:!0,get:function(){return a.useToaster}});var s=r(589);Object.defineProperty(t,"useToasterStore",{enumerable:!0,get:function(){return s.useStore}}),t.default=n.toast},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.toast=t.LoaderIcon=t.ErrorIcon=t.CheckmarkIcon=t.Toaster=t.ToastIcon=t.ToastBar=void 0;const a=r(946);Object.defineProperty(t,"toast",{enumerable:!0,get:function(){return a.toast}}),o(r(817),t);var s=r(839);Object.defineProperty(t,"ToastBar",{enumerable:!0,get:function(){return s.ToastBar}});var i=r(773);Object.defineProperty(t,"ToastIcon",{enumerable:!0,get:function(){return i.ToastIcon}});var c=r(354);Object.defineProperty(t,"Toaster",{enumerable:!0,get:function(){return c.Toaster}});var u=r(796);Object.defineProperty(t,"CheckmarkIcon",{enumerable:!0,get:function(){return u.CheckmarkIcon}});var l=r(967);Object.defineProperty(t,"ErrorIcon",{enumerable:!0,get:function(){return l.ErrorIcon}});var d=r(418);Object.defineProperty(t,"LoaderIcon",{enumerable:!0,get:function(){return d.LoaderIcon}}),t.default=a.toast},925:(e,t)=>{let r={data:""},n=e=>"object"==typeof window?((e?e.querySelector("#_goober"):window._goober)||Object.assign((e||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:e||r,o=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,a=/\/\*[^]*?\*\/|  +/g,s=/\n+/g,i=(e,t)=>{let r="",n="",o="";for(let a in e){let s=e[a];"@"==a[0]?"i"==a[1]?r=a+" "+s+";":n+="f"==a[1]?i(s,a):a+"{"+i(s,"k"==a[1]?"":t)+"}":"object"==typeof s?n+=i(s,t?t.replace(/([^,])+/g,(e=>a.replace(/(^:.*)|([^,])+/g,(t=>/&/.test(t)?t.replace(/&/g,e):e?e+" "+t:t)))):a):null!=s&&(a=/^--/.test(a)?a:a.replace(/[A-Z]/g,"-$&").toLowerCase(),o+=i.p?i.p(a,s):a+":"+s+";")}return r+(t&&o?t+"{"+o+"}":o)+n},c={},u=e=>{if("object"==typeof e){let t="";for(let r in e)t+=r+u(e[r]);return t}return e},l=(e,t,r,n,l)=>{let d=u(e),f=c[d]||(c[d]=(e=>{let t=0,r=11;for(;t<e.length;)r=101*r+e.charCodeAt(t++)>>>0;return"go"+r})(d));if(!c[f]){let t=d!==e?e:(e=>{let t,r,n=[{}];for(;t=o.exec(e.replace(a,""));)t[4]?n.shift():t[3]?(r=t[3].replace(s," ").trim(),n.unshift(n[0][r]=n[0][r]||{})):n[0][t[1]]=t[2].replace(s," ").trim();return n[0]})(e);c[f]=i(l?{["@keyframes "+f]:t}:t,r?"":"."+f)}let p=r&&c.g?c.g:null;return r&&(c.g=c[f]),((e,t,r,n)=>{n?t.data=t.data.replace(n,e):-1===t.data.indexOf(e)&&(t.data=r?e+t.data:t.data+e)})(c[f],t,n,p),f},d=(e,t,r)=>e.reduce(((e,n,o)=>{let a=t[o];if(a&&a.call){let e=a(r),t=e&&e.props&&e.props.className||/^go/.test(e)&&e;a=t?"."+t:e&&"object"==typeof e?e.props?"":i(e,""):!1===e?"":e}return e+n+(null==a?"":a)}),"");function f(e){let t=this||{},r=e.call?e(t.p):e;return l(r.unshift?r.raw?d(r,[].slice.call(arguments,1),t.p):r.reduce(((e,r)=>Object.assign(e,r&&r.call?r(t.p):r)),{}):r,n(t.target),t.g,t.o,t.k)}let p,y,b,m=f.bind({g:1}),g=f.bind({k:1});t.css=f,t.extractCss=e=>{let t=n(e),r=t.data;return t.data="",r},t.glob=m,t.keyframes=g,t.setup=function(e,t,r,n){i.p=t,p=e,y=r,b=n},t.styled=function(e,t){let r=this||{};return function(){let n=arguments;function o(a,s){let i=Object.assign({},a),c=i.className||o.className;r.p=Object.assign({theme:y&&y()},i),r.o=/ *go\d+/.test(c),i.className=f.apply(r,n)+(c?" "+c:""),t&&(i.ref=s);let u=e;return e[0]&&(u=i.as||e,delete i.as),b&&u[0]&&b(i),p(u,i)}return t?t(o):o}}}},t={},function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}(607);var e,t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,